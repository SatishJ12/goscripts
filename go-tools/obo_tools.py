#!/usr/bin/env python3
# -*- coding: utf-8 -*-
'''
@author: Pieter Moris
'''

import os, re


class goTerm:
    """
    GO term object.

    Stores the ID, name and domain of the GO term and contains dictionaries for child and parent nodes.

    Attributes
    ----------
    id : str
        The identifier of the GO term.
    altid : str
        Optional tag for an alternative id.
    name : str
        The GO term name.
    namespace : str
        The domain of the GO term (Cellular Component, Molecular Function or Biological Process).
    parents : set of str
        The parent terms of the GO term, as indicated by the `is_a` relationship.
    children : set of str
        The child terms of the GO term, derived from other GO terms after a complete OBO file is processed initially.


    # https://stackoverflow.com/questions/1336791/dictionary-vs-object-which-is-more-efficient-and-why
    # https://stackoverflow.com/questions/3489071/in-python-when-to-use-a-dictionary-list-or-set
    # When you want to store some values which you'll be iterating over, Python's list constructs are slightly faster.
    # However, if you'll be storing (unique) values in order to check for their existence, then sets are significantly faster.
    '''
    """

    goCount = 0

    __slots__ = ('id', 'name', 'altid', 'namespace', 'children', 'parents')

    def __init__(self, GOid):
        self.id = GOid
        self.altid = []
        self.name = ''
        self.namespace = ''
        self.children = set()
        self.parents = set()

        goTerm.goCount += 1

def importOBO(path):
    """
    Imports an OBO file and generates a dictionary containing an OBO object for each GO term.

    Every entry that is referred to via either "is_a" or "relationship: part_of" is considered
    a parent of the referring entry.

    Parameters
    ----------
    path : str
        The path to the file.

    Returns
    -------
    dict of OBO objects
        Keys are of the format `GO-0000001` and map to OBO objects.

    Possible improvements:
        Check for `is_obsolete` and `replaced_by`, although the replacement term should be in OBO file as an entry.
    """

    GOdict = {}

    path = os.path.abspath(path)
    with open(path, 'r') as oboFile:

        # find re pattern to match '[Entry]'
        entryPattern = re.compile('^\[.+\]')
        validEntry = False

        for line in oboFile:

            # Only parse entries preceded by [Entry], not [Typedef]
            if entryPattern.search(line):
                if 'Term' in line:
                    validEntry = True
                else:
                    validEntry = False

            # if [Entry] was encountered previously, parse annotation
            elif validEntry:
                if line.startswith('id'):
                    # Store ID for lookup of other attributes in next lines
                    GOid = line.split(': ')[1].rstrip()

                    if GOid not in GOdict:
                        # check if ID is already stored as a key in dictionary and if not,
                        # create a new GOid object as the value for this key
                        GOdict[GOid] = goTerm(GOid)

                # Store all the other attributes for the current term as an object attribute
                elif line.startswith('name:'):
                    GOdict[GOid].name = line.split(': ')[1].rstrip()
                elif line.startswith('namespace:'):
                    GOdict[GOid].namespace = line.split(': ')[1].rstrip()
                elif line.startswith('alt_id:'):
                    GOdict[GOid].altid.append(line.split(': ')[1].rstrip())
                elif line.startswith('is_a:'):
                    GOdict[GOid].parents.add(line.split()[1].rstrip())
                # elif line.startswith('relationship: part_of'):
                #     GOdict[GOid].parents.add(line.split()[2].rstrip())

    print('Retrieved', len(GOdict), 'GO terms from', path, '\n')

    return GOdict


def filterOnNamespace(GOdict, namespace):
    """
    Reduces the dictionary of OBO objects to those belonging to a specific namespace.

    Parameters
    ----------
    GOdict : dict
        A dictionary of GO objects generated by importOBO().
        Keys are of the format `GO-0000001` and map to OBO objects.
    namespace : str
        The namespace to restrict the GO dictionary and enrichment test to. E.g. biological_process, cellular_component
        or molecular_function.

    Returns
    -------
    dict
        A filtered dictionary of GO objects all belonging to the namespace.
    """

    filteredGOdict = {GOid: GOobj for GOid, GOobj in GOdict.items() if GOobj.namespace == namespace}

    if not filteredGOdict:
        print('Namespace', namespace, 'was not found in the obo file. Using all annotations in obo file instead.\n')
        return GOdict

    print('Found', len(filteredGOdict), 'GO terms belonging to', namespace + '.\n')

    return filteredGOdict


def buildGOtree(GOdict):
    """
    Generates the entire GO tree's parent structure by walking through the hierarchy of each GO entry.

    Parameters
    ----------
    GOdict : dict
        A dictionary of GO objects generated by importOBO().
        Keys are of the format `GO-0000001` and map to OBO objects.

    Returns
    -------
    None
        The input GO dictionary will be updated in place.
        Each term object's parent attributes now trace back over the full tree hierarchy.
    """

    # NOTE: The process CANNOT be sped up by working upwards from just the GO terms
    # that are present in the subset association dictionary, because by doing this
    # not all of their child terms will be found. Yet these child terms should also be
    # counted while testing their parent terms.
    # subsetGOids = {GOid for gene, GOids in gafSubset.items() for GOid in GOids}
    # for GOid in subsetGOids:
    #     parentSet = set()
    #     propagateParents(GOid, GOid, GOdict, parentSet)
    #     GOdict[GOid].parents.update(parentSet)

    # Process each GO term in the GO dictionary
    for GOid, GOobj in GOdict.items():
        # Define new set to store higher order parents
        parentSet = set()
        # Call helper function to propagate through parents
        propagateParents(GOid, GOid, GOdict, parentSet)
        # Update GO term's parents attribute to include all higher order
        # parents
        GOobj.parents.update(parentSet)

    # After all parents have been found, for each ID, add it as a child for
    # all its parents
    completeChildHierarchy(GOdict)

    return None


def propagateParents(currentTerm, baseGOid, GOdict, parentSet):
    """
    Propagates through the parent hierarchy of a provided GO term.

    Parameters
    ----------
    currentTerm : str
        The GO id that is being visited.
    baseGOid : str
        The original GO term id for which the search for its parents was started.
    GOdict : dict
        A dictionary of GO objects generated by importOBO().
        Keys are of the format `GO-0000001` and map to OBO objects.
    parentSet : set
        An, initially, empty set that gets passed through the recursion.
        It tracks the entire group of parent terms of the original base GO id.

    Returns
    -------
    None
        Updates the parentSet set inplace so that it contains all the parents for the baseGOid.
    """

    # If current term has no further parents the recursion will end and move
    # back up the stack, since there are no parents to iterate over
    parents = GOdict.get(currentTerm).parents

    # For each parent of the current term under consideration
    for parent in parents:
        # Check if parent is present in GO dictionary
        if parent in GOdict:
            # Add current term's parents to growing set
            parentSet.add(parent)
            # and recurse function for each parent
            propagateParents(parent, baseGOid, GOdict, parentSet)

        else:
            # Print a warning that a parent term was reported for the original base term,
            # yet the term is absent from the gene ontology file
            print('WARNING!\n' + parent, 'was defined as a parent for',
                  baseGOid, ', but was not found in the OBO file.')

    return None


def completeChildHierarchy(GOdict):
    """
    Generates the entire GO tree's child structure by iterating over the parents
    of each GO object.

    NOTE: completeParentsHierarchy() must be run prior to this function.

    Parameters
    ----------
    GOdict : dict
        A dictionary of GO objects generated by importOBO().
        Keys are of the format `GO-0000001` and map to OBO objects.

    Returns
    -------
    None
        Updates the provided GO dictionary inplace so that the child attributes
        trace back over the full GO hierarchy.
    """

    # For every GO term
    for GOid, GOobj in GOdict.items():
        # add this term as a child for all of its parents
        [GOdict[parent].children.add(GOid) for parent in GOobj.parents]

    return None
